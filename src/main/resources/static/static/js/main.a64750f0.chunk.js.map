{"version":3,"sources":["utils/Client.js","components/Container.js","utils/Notification.js","components/forms/AddStudentForm.js","components/Footer.js","App.js","reportWebVitals.js","index.js"],"names":["handleErrorResponse","error","response","data","request","message","statusText","getAllStudents","a","axios","get","addNewStudent","student","post","console","log","Container","props","fluid","className","children","openNotification","type","description","notification","errorNotification","inputBottomMargin","marginBottom","tagStyle","color","AddStudentForm","submitHandler","setSubmitting","onSuccess","onFailure","initialValues","firstName","lastName","email","gender","validate","values","errors","test","includes","onSubmit","touched","handleChange","handleBlur","handleSubmit","isSubmitting","submitForm","isValid","style","name","onChange","onBlur","value","placeholder","onClick","disabled","Footer","numberOfStudents","handleAddStudentClickEvent","undefined","backgroundColor","marginRight","size","App","useState","students","setStudents","isLoading","setIsLoading","isAddStudentModalVisisble","setIsAddStudentModalVisisble","fetchStudents","httpStatus","useEffect","openAddStudentModal","closeAddStudentModal","commonElements","title","visible","onOk","onCancel","width","length","columns","key","render","text","charAt","toUpperCase","dataIndex","dataSource","rowKey","pagination","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.a64750f0.chunk.js","sourcesContent":["import axios from \"axios\";\n\nconst handleErrorResponse = (error) => {\n  let errorResponse;\n  if (error.response && error.response.data) {\n    // I expect the API to handle error responses in valid format\n    errorResponse = error.response.data;\n    // JSON stringify if you need the json and use it later\n  } else if (error.request) {\n    // TO Handle the default error response for Network failure or 404 etc.,\n    errorResponse = error.request.message || error.request.statusText;\n  } else {\n    errorResponse = error.message;\n  }\n\n  throw errorResponse;\n};\n\nexport const getAllStudents = async () => {\n  try {\n    const { data } = await axios.get(`api/students`);\n    return data;\n  } catch (error) {\n    handleErrorResponse(error);\n  }\n};\n\nexport const addNewStudent = async (student) => {\n  try {\n    await axios.post(`api/students`, student);\n    console.log(\"student added success.\");\n  } catch (error) {\n    handleErrorResponse(error);\n  }\n};\n","import React from \"react\";\nimport ReactBootstrapContainer from \"react-bootstrap/Container\";\n\nconst Container = (props) => {\n  return (\n    <ReactBootstrapContainer fluid=\"md\" className=\"container\">\n      {props.children}\n    </ReactBootstrapContainer>\n  );\n};\n\nexport default Container;\n","import notification from \"antd/lib/notification\";\n\nconst openNotification = (type, message, description) => {\n  notification[type]({ message, description });\n};\n\nexport const successNotification = (message, description) =>\n  openNotification(\"sucess\", message, description);\n\nexport const infosNotification = (message, description) =>\n  openNotification(\"info\", message, description);\n\nexport const warningNotification = (message, description) =>\n  openNotification(\"warning\", message, description);\n\nexport const errorNotification = (message, description) =>\n  openNotification(\"error\", message, description);\n","import React from \"react\";\nimport { Formik } from \"formik\";\nimport Input from \"antd/lib/input\";\nimport Button from \"antd/lib/button\";\nimport Tag from \"antd/lib/tag\";\nimport { addNewStudent } from \"../../utils/Client\";\nimport { errorNotification } from \"../../utils/Notification\";\n\nconst inputBottomMargin = { marginBottom: \"10px\" };\nconst tagStyle = {\n  color: \"red\",\n  ...inputBottomMargin,\n};\n\nconst AddStudentForm = (props) => {\n  const initialValues = { firstName: \"\", lastName: \"\", email: \"\", gender: \"\" };\n\n  const validateHandler = (values) => {\n    let errors = {};\n\n    if (!values.firstName) {\n      errors.firstName = \"First Name Required\";\n    }\n\n    if (!values.lastName) {\n      errors.lastName = \"Last Name Required\";\n    }\n\n    if (!values.email) {\n      errors.email = \"Email Required\";\n    } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,}$/i.test(values.email)) {\n      errors.email = \"Invalid email address\";\n    }\n\n    if (!values.gender) {\n      errors.gender = \"Gender Required\";\n    } else if (![\"MALE\", \"male\", \"FEMALE\", \"female\"].includes(values.gender)) {\n      errors.gender = \"Gender must be (MALE, male, FEMALE, female)\";\n    }\n\n    return errors;\n  };\n\n  // to use axios\n  const submitHandler = async (student, { setSubmitting }) => {\n    try {\n      await addNewStudent(student);\n      props.onSuccess();\n      setSubmitting(false);\n    } catch (error) {\n      console.log(error);\n      props.onFailure(error);\n\n      setSubmitting(false);\n    }\n  };\n\n  return (\n    // prettier-ignore\n    <Formik\n      initialValues={initialValues}\n      validate={validateHandler}\n      onSubmit={submitHandler}\n    >\n      {\n          ({values, errors, touched, handleChange,handleBlur, handleSubmit,isSubmitting,submitForm,isValid}) => (\n            <form onSubmit={handleSubmit}>\n                <Input\n                    style={inputBottomMargin}\n                    name=\"firstName\"\n                    onChange={handleChange}\n                    onBlur={handleBlur}\n                    value={values.firstName}\n                    placeholder='First name. E.g John'\n                />\n                {errors.firstName && touched.firstName && <Tag style={tagStyle}>{errors.firstName}</Tag>}\n        \n                <Input\n                    style={inputBottomMargin}\n                    name=\"lastName\"\n                    onChange={handleChange}\n                    onBlur={handleBlur}\n                    value={values.lastName}\n                    placeholder='Last name. E.g Jones'\n                />\n                {errors.lastName && touched.lastName && <Tag style={tagStyle}>{errors.lastName}</Tag>}\n        \n                <Input\n                    style={inputBottomMargin}\n                    name=\"email\"\n                    type='email'\n                    onChange={handleChange}\n                    onBlur={handleBlur}\n                    value={values.email}\n                    placeholder='Email. E.g example@gmail.com'\n                />\n                {errors.email && touched.email && <Tag style={tagStyle}>{errors.email}</Tag>}\n        \n                <Input\n                    style={inputBottomMargin}\n                    name=\"gender\"\n                    onChange={handleChange}\n                    onBlur={handleBlur}\n                    value={values.gender}\n                    placeholder='Gender. E.g Male or Female'\n                />\n                {errors.gender && touched.gender && <Tag style={tagStyle}>{errors.gender}</Tag>}\n        \n                <Button \n                    onClick={() => submitForm()} \n                    type=\"submit\" \n                    disabled={isSubmitting | (touched && !isValid)}>\n                    Submit\n                </Button>\n        \n            </form>\n          )\n      }\n    </Formik>\n  );\n};\n\nexport default AddStudentForm;\n","import React from \"react\";\nimport Avatar from \"antd/lib/avatar\";\nimport Button from \"antd/lib/button\";\nimport Container from \"./Container\";\n\nconst Footer = ({ numberOfStudents, handleAddStudentClickEvent }) => {\n  return (\n    <div className=\"footer\">\n      <Container>\n        {numberOfStudents !== undefined ? (\n          <Avatar\n            style={{ backgroundColor: \"#abdbe0\", marginRight: \"8px\" }}\n            size=\"large\"\n          >\n            {numberOfStudents}\n          </Avatar>\n        ) : null}\n\n        <Button onClick={() => handleAddStudentClickEvent()} type=\"default\">\n          Add new student +\n        </Button>\n      </Container>\n    </div>\n  );\n};\n\nexport default Footer;\n","import React, { useState, useEffect } from \"react\";\nimport { getAllStudents } from \"./utils/Client\";\nimport Table from \"antd/lib/table\";\nimport Avatar from \"antd/lib/avatar\";\nimport Spin from \"antd/lib/spin\";\nimport Empty from \"antd/lib/empty\";\nimport Modal from \"antd/lib/modal\";\nimport Container from \"./components/Container\";\nimport AddStudentForm from \"./components/forms/AddStudentForm\";\nimport Footer from \"./components/Footer\";\nimport { errorNotification } from \"./utils/Notification\";\nimport \"./App.css\";\n\nconst App = () => {\n  const [students, setStudents] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [isAddStudentModalVisisble, setIsAddStudentModalVisisble] = useState(\n    false\n  );\n\n  const fetchStudents = async () => {\n    try {\n      setIsLoading(true);\n      const response = await getAllStudents();\n\n      setStudents(response);\n\n      setIsLoading(false);\n    } catch (error) {\n      console.log(error);\n\n      const message = error.message;\n      const description = error.httpStatus;\n      errorNotification(message, description);\n\n      setIsLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    fetchStudents();\n  }, []);\n\n  const openAddStudentModal = () => setIsAddStudentModalVisisble(true);\n\n  const closeAddStudentModal = () => setIsAddStudentModalVisisble(false);\n\n  const commonElements = () => (\n    <div>\n      <Modal\n        title=\"Add new student\"\n        visible={isAddStudentModalVisisble}\n        onOk={closeAddStudentModal}\n        onCancel={closeAddStudentModal}\n        width={1000}\n      >\n        <AddStudentForm\n          onSuccess={() => {\n            closeAddStudentModal();\n            fetchStudents();\n          }}\n          onFailure={(error) => {\n            const message = error.message;\n            const description = error.httpStatus\n              ? error.httpStatus\n              : error.error;\n            errorNotification(message, description);\n          }}\n        />\n      </Modal>\n\n      <Footer\n        numberOfStudents={students ? students.length : 0}\n        handleAddStudentClickEvent={openAddStudentModal}\n      />\n    </div>\n  );\n\n  // render spinner\n  if (isLoading) {\n    return (\n      <Container>\n        <Spin size=\"large\" />\n      </Container>\n    );\n  }\n\n  // render students\n  if (students && students.length) {\n    const columns = [\n      {\n        title: \"\",\n        key: \"avatar\",\n        render: (text, student) => (\n          <Avatar size=\"large\" style={{ backgroundColor: \"#abdbe0\" }}>\n            {`${student.firstName\n              .charAt(0)\n              .toUpperCase()}${student.lastName.charAt(0).toUpperCase()}`}\n          </Avatar>\n        ),\n      },\n      {\n        title: \"Student Id\",\n        dataIndex: \"studentId\",\n        key: \"studentId\",\n      },\n      {\n        title: \"First Name\",\n        dataIndex: \"firstName\",\n        key: \"firstName\",\n      },\n      {\n        title: \"Last Name\",\n        dataIndex: \"lastName\",\n        key: \"lastName\",\n      },\n      {\n        title: \"Email\",\n        dataIndex: \"email\",\n        key: \"email\",\n      },\n      {\n        title: \"Gender\",\n        dataIndex: \"gender\",\n        key: \"gender\",\n      },\n    ];\n\n    return (\n      <Container>\n        <Table\n          style={{ marginBottom: \"100px\" }}\n          dataSource={students}\n          columns={columns}\n          rowKey=\"studentId\"\n          pagination={false}\n        />\n\n        <br />\n\n        {commonElements()}\n      </Container>\n    );\n  }\n\n  // default render\n  return (\n    <Container>\n      <Empty description={<h1>No Students found</h1>} />\n\n      {commonElements()}\n    </Container>\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport \"./index.css\";\nimport \"antd/dist/antd.css\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}